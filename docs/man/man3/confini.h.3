.TH "src/confini.h" 3 "Sun Oct 1 2017" "libconfini" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/confini.h \- libconfini header  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBIniFormat\fP"
.br
.RI "24-bit bitfield representing a unique format of an INI file (INI dialect) – \fCsizeof(IniFormat)\fP should be \fC3\fP "
.ti -1c
.RI "struct \fBIniStatistics\fP"
.br
.RI "Global statistics about an INI file\&. "
.ti -1c
.RI "struct \fBIniDispatch\fP"
.br
.RI "Dispatch of a single INI member\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCONFINI_ERROR\fP   4"
.br
.RI "Error flag (not present in user-generated interruptions) – its value should be considered opaque\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBIniFormat\fP \fBIniFormat\fP"
.br
.RI "24-bit bitfield representing a unique format of an INI file (INI dialect) – \fCsizeof(IniFormat)\fP should be \fC3\fP "
.ti -1c
.RI "typedef struct \fBIniStatistics\fP \fBIniStatistics\fP"
.br
.RI "Global statistics about an INI file\&. "
.ti -1c
.RI "typedef struct \fBIniDispatch\fP \fBIniDispatch\fP"
.br
.RI "Dispatch of a single INI member\&. "
.ti -1c
.RI "typedef uint32_t \fBIniFormatId\fP"
.br
.RI "24-bit bitmask representing the format of an INI file "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBConfiniErrorNo\fP { \fBCONFINI_EIINTR\fP = 1, \fBCONFINI_EFEINTR\fP = 2, \fBCONFINI_ENOENT\fP = 4, \fBCONFINI_ENOMEM\fP = 5, \fBCONFINI_EIO\fP = 6, \fBCONFINI_EFEOOR\fP = 7 }
.RI "Error codes – the actual values of each constant should be considered opaque\&. ""
.br
.ti -1c
.RI "enum \fBIniDelimiters\fP { \fBINI_ANY_SPACE\fP = 0, \fBINI_EQUALS\fP = '=', \fBINI_COLON\fP = ':' }
.RI "Most used delimiters (but a delimiter can also be any other ASCII character) ""
.br
.ti -1c
.RI "enum \fBIniNodeType\fP { \fBINI_UNKNOWN\fP = 0, \fBINI_VALUE\fP = 1, \fBINI_SECTION\fP = 2, \fBINI_KEY\fP = 3, \fBINI_COMMENT\fP = 4, \fBINI_INLINE_COMMENT\fP = 5, \fBINI_DISABLED_SECTION\fP = 6, \fBINI_DISABLED_KEY\fP = 7 }
.RI "INI nodes types\&. ""
.br
.ti -1c
.RI "enum \fBIniComments\fP { \fBINI_PARSE_COMMENT\fP = 0, \fBINI_SHOW_COMMENT\fP = 1, \fBINI_FORGET_COMMENT\fP = 2, \fBINI_NORMAL_CHARACTER\fP = 3 }
.RI "Possible values for \fBIniFormat::semicolon\fP and \fBIniFormat::hash\fP (i\&.e\&., meaning of \fC/\\s+[#;]/\fP in respect to a format) ""
.br
.ti -1c
.RI "enum \fBIniMultiline\fP { \fBINI_EVERYTHING_MULTILINE\fP = 0, \fBINI_ACTIVE_AND_DISABLED_MULTILINE\fP = 1, \fBINI_ACTIVE_MULTILINE\fP = 2, \fBINI_NO_MULTILINE\fP = 3 }
.RI "Possible values of \fBIniFormat::multiline_entries\fP\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBload_ini_file\fP (FILE *const ini_file, const \fBIniFormat\fP format, int(*const f_init)(\fBIniStatistics\fP *statistics, void *init_other), int(*const f_foreach)(\fBIniDispatch\fP *dispatch, void *foreach_other), void *user_data)"
.br
.RI "Parses an INI file and dispatches its content\&. "
.ti -1c
.RI "int \fBload_ini_path\fP (const char *const path, const \fBIniFormat\fP format, int(*const f_init)(\fBIniStatistics\fP *statistics, void *init_other), int(*const f_foreach)(\fBIniDispatch\fP *dispatch, void *foreach_other), void *user_data)"
.br
.RI "Parses an INI file and dispatches its content\&. "
.ti -1c
.RI "void \fBini_dispatch_case_insensitive_lowercase\fP (_Bool b_lowercase)"
.br
.RI "Sets the value of the global variable \fC\fBINI_INSENSITIVE_LOWERCASE\fP\fP "
.ti -1c
.RI "void \fBini_set_implicit_value\fP (char *const implicit_value, const size_t implicit_v_len)"
.br
.RI "Sets the value used for implicit keys\&. "
.ti -1c
.RI "\fBIniFormatId\fP \fBini_format_get_id\fP (const \fBIniFormat\fP format)"
.br
.RI "Converts an \fBIniFormat\fP into an \fBIniFormatId\fP\&. "
.ti -1c
.RI "void \fBini_format_set_to_id\fP (\fBIniFormat\fP *dest_format, \fBIniFormatId\fP format_id)"
.br
.RI "Sets all the values of an \fBIniFormat\fP by reading them from an \fBIniFormatId\fP\&. "
.ti -1c
.RI "_Bool \fBini_string_match_ss\fP (const char *const simple_string_a, const char *const simple_string_b, const \fBIniFormat\fP format)"
.br
.RI "Compares two simple strings and checks if they match\&. "
.ti -1c
.RI "_Bool \fBini_string_match_si\fP (const char *const simple_string, const char *const ini_string, const \fBIniFormat\fP format)"
.br
.RI "Compares an INI string with a simple string and checks if they match according to a format\&. "
.ti -1c
.RI "_Bool \fBini_string_match_ii\fP (const char *const ini_string_a, const char *const ini_string_b, const \fBIniFormat\fP format)"
.br
.RI "Compares two INI strings and checks if they match according to a format\&. "
.ti -1c
.RI "size_t \fBini_unquote\fP (char *const ini_string, const \fBIniFormat\fP format)"
.br
.RI "Unescapes \fC\\\\\fP, \fC\\'\fP and \fC\\"\fP and removes all unescaped quotes (if single/double quotes are considered metacharacters in respect to the format given) "
.ti -1c
.RI "size_t \fBini_array_get_length\fP (const char *const ini_string, const char delimiter, const \fBIniFormat\fP format)"
.br
.RI "Gets the length of a stringified INI array\&. "
.ti -1c
.RI "int \fBini_array_foreach\fP (const char *const ini_string, const char delimiter, const \fBIniFormat\fP format, int(*const f_foreach)(const char *fullstring, size_t memb_offset, size_t memb_length, size_t index, \fBIniFormat\fP format, void *foreach_other), void *user_data)"
.br
.RI "Calls a custom function for each member of a stringified INI array without modifying the content of the buffer – useful for read-only (const) stringified arrays\&. "
.ti -1c
.RI "size_t \fBini_collapse_array\fP (char *const ini_string, const char delimiter, const \fBIniFormat\fP format)"
.br
.RI "Compresses the distribution of the data of a stringified INI array by removing all the white spaces that sorround its delimiters\&. "
.ti -1c
.RI "int \fBini_split_array\fP (char *const ini_string, const char delimiter, const \fBIniFormat\fP format, int(*const f_foreach)(char *member, size_t memb_length, size_t index, \fBIniFormat\fP format, void *foreach_other), void *user_data)"
.br
.RI "Splits a stringified INI array into NUL-separated members and calls a custom function for each member\&. "
.ti -1c
.RI "signed int \fBini_get_bool\fP (const char *const ini_string, const signed int return_value)"
.br
.RI "Checks whether a string matches \fIexactly\fP one of the booleans listed in the private constant \fC_LIBCONFINI_BOOLEANS_\fP (case insensitive) "
.ti -1c
.RI "signed int \fBini_get_lazy_bool\fP (const char *const ini_string, const signed int return_value)"
.br
.RI "Checks whether the first letter of a string matches the first letter of one of the booleans listed in the private constant \fC_LIBCONFINI_BOOLEANS_\fP (case insensitive) "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int(*const \fBini_get_int\fP )(const char *ini_string)"
.br
.RI "Link to \fC\fCatoi()\fP\fP "
.ti -1c
.RI "long int(*const \fBini_get_lint\fP )(const char *ini_string)"
.br
.RI "Link to \fC\fCatol()\fP\fP "
.ti -1c
.RI "long long int(*const \fBini_get_llint\fP )(const char *ini_string)"
.br
.RI "Link to \fC\fCatoll()\fP\fP "
.ti -1c
.RI "double(*const \fBini_get_float\fP )(const char *ini_string)"
.br
.RI "Link to \fC\fCatof()\fP\fP "
.ti -1c
.RI "static const \fBIniFormat\fP \fBINI_DEFAULT_FORMAT\fP = { \fBINI_EQUALS\fP , \fBINI_PARSE_COMMENT\fP , \fBINI_PARSE_COMMENT\fP , \fBINI_EVERYTHING_MULTILINE\fP , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , }"
.br
.RI "A model format\&. "
.ti -1c
.RI "_Bool \fBINI_INSENSITIVE_LOWERCASE\fP"
.br
.RI "If set to any non-zero value key and section names in case-insensitive INI formats will be dispatched lowercase, verbatim otherwise (default value: non-zero) "
.ti -1c
.RI "char * \fBINI_IMPLICIT_VALUE\fP"
.br
.RI "Value to be dispatched in case of implicit keys (default value: \fCNULL\fP) "
.ti -1c
.RI "size_t \fBINI_IMPLICIT_V_LEN\fP"
.br
.RI "Length of the value dispatched in case of implicit keys – it can be set to any unsigned number, independently of \fBINI_IMPLICIT_VALUE\fP (default value: \fC0\fP) "
.in -1c
.SH "Detailed Description"
.PP 
libconfini header 


.PP
\fBAuthor:\fP
.RS 4
Stefano Gioffre\*(` 
.RE
.PP
\fBCopyright:\fP
.RS 4
GNU Public License v3 
.RE
.PP
\fBDate:\fP
.RS 4
2016-2017 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define CONFINI_ERROR   4"

.PP
Error flag (not present in user-generated interruptions) – its value should be considered opaque\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBIniDispatch\fP  \fBIniDispatch\fP"

.PP
Dispatch of a single INI member\&. 
.SS "typedef struct \fBIniFormat\fP   \fBIniFormat\fP"

.PP
24-bit bitfield representing a unique format of an INI file (INI dialect) – \fCsizeof(IniFormat)\fP should be \fC3\fP 
.SS "typedef uint32_t \fBIniFormatId\fP"

.PP
24-bit bitmask representing the format of an INI file 
.SS "typedef struct \fBIniStatistics\fP  \fBIniStatistics\fP"

.PP
Global statistics about an INI file\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBConfiniErrorNo\fP"

.PP
Error codes – the actual values of each constant should be considered opaque\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICONFINI_EIINTR \fP\fP
Interrupted by the user during \fCf_init()\fP 
.TP
\fB\fICONFINI_EFEINTR \fP\fP
Interrupted by the user during \fCf_foreach()\fP 
.TP
\fB\fICONFINI_ENOENT \fP\fP
File inaccessible 
.TP
\fB\fICONFINI_ENOMEM \fP\fP
Error allocating memory 
.TP
\fB\fICONFINI_EIO \fP\fP
Error reading the file 
.TP
\fB\fICONFINI_EFEOOR \fP\fP
The loop is longer than expected (out of range) 
.SS "enum \fBIniComments\fP"

.PP
Possible values for \fBIniFormat::semicolon\fP and \fBIniFormat::hash\fP (i\&.e\&., meaning of \fC/\\s+[#;]/\fP in respect to a format) 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINI_PARSE_COMMENT \fP\fP
This character opens a comment or a disabled entry 
.TP
\fB\fIINI_SHOW_COMMENT \fP\fP
This character opens a comment 
.TP
\fB\fIINI_FORGET_COMMENT \fP\fP
This character opens a comment that must be ignored 
.TP
\fB\fIINI_NORMAL_CHARACTER \fP\fP
This is a normal character 
.SS "enum \fBIniDelimiters\fP"

.PP
Most used delimiters (but a delimiter can also be any other ASCII character) 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINI_ANY_SPACE \fP\fP
In multiline INIs: \fC/(?:\\\\(?:\\n\\r?|\\r\\n?)|[\\t \\v\\f])+/\fP, in non-multiline INIs: \fC/[\\t \\v\\f])+/\fP 
.TP
\fB\fIINI_EQUALS \fP\fP
\fC=\fP 
.TP
\fB\fIINI_COLON \fP\fP
\fC:\fP 
.SS "enum \fBIniMultiline\fP"

.PP
Possible values of \fBIniFormat::multiline_entries\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINI_EVERYTHING_MULTILINE \fP\fP
Comments, section paths and keys – disabled or not – are allowed to be multiline\&. 
.TP
\fB\fIINI_ACTIVE_AND_DISABLED_MULTILINE \fP\fP
Only section paths and keys – disabled or not – are allowed to be multiline\&. 
.TP
\fB\fIINI_ACTIVE_MULTILINE \fP\fP
Only \fIactive\fP section paths and \fIactive\fP keys are allowed to be multiline\&. 
.TP
\fB\fIINI_NO_MULTILINE \fP\fP
The multiline escaping sequence is disabled\&. 
.SS "enum \fBIniNodeType\fP"

.PP
INI nodes types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINI_UNKNOWN \fP\fP
.TP
\fB\fIINI_VALUE \fP\fP
Not used here, but available for user's implementations 
.TP
\fB\fIINI_SECTION \fP\fP
.TP
\fB\fIINI_KEY \fP\fP
.TP
\fB\fIINI_COMMENT \fP\fP
.TP
\fB\fIINI_INLINE_COMMENT \fP\fP
.TP
\fB\fIINI_DISABLED_SECTION \fP\fP
.TP
\fB\fIINI_DISABLED_KEY \fP\fP
.SH "Function Documentation"
.PP 
.SS "int ini_array_foreach (const char *const ini_string, const char delimiter, const \fBIniFormat\fP format, int(*)(const char *fullstring, size_t memb_offset, size_t memb_length, size_t index, \fBIniFormat\fP format, void *foreach_other) f_foreach, void * user_data)"

.PP
Calls a custom function for each member of a stringified INI array without modifying the content of the buffer – useful for read-only (const) stringified arrays\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP The stringified array 
.br
\fIdelimiter\fP The delimiter between the array members – if zero (\fCINI_ANY_SPACE\fP) any space is delimiter (\fC/(?:\\\\(?:\\n\\r?|\\r\\n?)|[\\t \\v\\f])+/\fP) 
.br
\fIformat\fP The format of the INI file 
.br
\fIf_foreach\fP The function that will be invoked for each array member 
.br
\fIuser_data\fP A custom argument, or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero for success, otherwise an error code
.RE
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&.
.PP
The function \fCf_foreach\fP will be invoked with six arguments: \fCfullstring\fP (a pointer to \fCini_string\fP), \fCmemb_offset\fP (the offset of the member in bytes), \fCmemb_length\fP (the length of the member in bytes), \fCindex\fP (the index of the member in number of members), \fCformat\fP (the format of the INI file), \fCforeach_other\fP (the custom argument \fCuser_data\fP previously passed)\&. If \fCf_foreach\fP returns a non-zero value the function \fC\fBini_array_foreach()\fP\fP will be interrupted\&. 
.SS "size_t ini_array_get_length (const char *const ini_string, const char delimiter, const \fBIniFormat\fP format)"

.PP
Gets the length of a stringified INI array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP The stringified array 
.br
\fIdelimiter\fP The delimiter between the array members – if zero (\fCINI_ANY_SPACE\fP) any space is delimiter (\fC/(?:\\\\(?:\\n\\r?|\\r\\n?)|[\\t \\v\\f])+/\fP) 
.br
\fIformat\fP The format of the INI file 
.RE
.PP
\fBReturns:\fP
.RS 4
The length of the INI array
.RE
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&. 
.SS "size_t ini_collapse_array (char *const ini_string, const char delimiter, const \fBIniFormat\fP format)"

.PP
Compresses the distribution of the data of a stringified INI array by removing all the white spaces that sorround its delimiters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP The stringified array 
.br
\fIdelimiter\fP The delimiter between the array members – if zero (\fCINI_ANY_SPACE\fP) any space is delimiter (\fC/(?:\\\\(?:\\n\\r?|\\r\\n?)|[\\t \\v\\f])+/\fP) 
.br
\fIformat\fP The format of the INI file 
.RE
.PP
\fBReturns:\fP
.RS 4
The new length of the string containing the array
.RE
.PP
Out of quotes similar to ECMAScript \fCini_string\&.replace(new RegExp('^\\\\s+|\\\\s*(?:(' + delimiter + ')\\\\s*|($))', 'g'), '$1$2')\fP\&. If \fCINI_ANY_SPACE\fP (\fC0\fP) is used as delimiter, one or more different spaces (\fC/[\\t \\v\\f\\n\\r]+/\fP) will always be collapsed to one space (' '), independently of their position\&.
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&.
.PP
This function can be useful before invoking \fCmemcpy()\fP using \fCini_string\fP as source\&.
.PP
The argument \fCformat\fP is used for the following properties:
.PP
.IP "\(bu" 2
\fCformat\&.no_double_quotes\fP
.IP "\(bu" 2
\fCformat\&.no_single_quotes\fP
.PP
.PP
.PP
.nf
#include <stdio\&.h>
#include <stdlib\&.h>
#include <string\&.h>
#include <confini\&.h>

static int populate_array (char *part, size_t part_len, size_t idx, IniFormat format, void *v_array) {

    ini_unquote(part, format);
    ((char **) v_array)[idx] = part;

    return 0;

}

static int my_ini_listener (IniDispatch *dispatch, void *v_null) {

    if (ini_string_match_si("my_array", dispatch->data, dispatch->format)) {

        #define DELIMITER ','

        char **my_array;
        size_t my_array_length;

        /* Save memory with `ini_collapse_array()` */
        dispatch->v_len = ini_collapse_array(dispatch->value, DELIMITER, dispatch->format);

        /* Allocate a new array of strings with `malloc()` */
        my_array_length = ini_array_get_length(dispatch->value, DELIMITER, dispatch->format);
        my_array = (char **) malloc(my_array_length * sizeof(char *) + (dispatch->v_len + 1) * sizeof(char));

        /* Copy the strings with `memcpy()` */
        memcpy(
            (char *) my_array + my_array_length * sizeof(char *),
            dispatch->value,
            dispatch->v_len + 1
        );

        /* Populate the array */
        ini_split_array(
            (char *) my_array + my_array_length * sizeof(char *),
            DELIMITER,
            dispatch->format,
            populate_array,
            my_array
        );

        /* Do something with `my_array` */
        printf("Array `my_array` has been created\&.\n");

    }

    return 0;

}

int main () {

    if (load_ini_path("typed_ini\&.conf", INI_DEFAULT_FORMAT, NULL, my_ini_listener, NULL)) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    return 0;

}
.fi
.PP
 
.SS "void ini_dispatch_case_insensitive_lowercase (_Bool b_lowercase)"

.PP
Sets the value of the global variable \fC\fBINI_INSENSITIVE_LOWERCASE\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fIb_lowercase\fP The new value 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing
.RE
.PP
If \fCb_lowercase\fP is \fCTRUE\fP key and section names in case-insensitive INI formats will be dispatched lowercase, verbatim otherwise (default value: \fCTRUE\fP)\&. 
.SS "\fBIniFormatId\fP ini_format_get_id (const \fBIniFormat\fP source)"

.PP
Converts an \fBIniFormat\fP into an \fBIniFormatId\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP The \fBIniFormat\fP to be read 
.RE
.PP
\fBReturns:\fP
.RS 4
The mask representing the format 
.RE
.PP

.SS "void ini_format_set_to_id (\fBIniFormat\fP * dest_format, \fBIniFormatId\fP format_id)"

.PP
Sets all the values of an \fBIniFormat\fP by reading them from an \fBIniFormatId\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdest_format\fP The \fBIniFormat\fP to be set 
.br
\fImask\fP The \fC\fBIniFormatId\fP\fP to be read 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing 
.RE
.PP

.SS "signed int ini_get_bool (const char *const ini_string, const signed int return_value)"

.PP
Checks whether a string matches \fIexactly\fP one of the booleans listed in the private constant \fC_LIBCONFINI_BOOLEANS_\fP (case insensitive) 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP A string to be checked 
.br
\fIreturn_value\fP A value that is returned if no matching boolean has been found 
.RE
.PP
\fBReturns:\fP
.RS 4
The matching boolean value (0 or 1) or \fCreturn_value\fP if no boolean has been found
.RE
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&.
.PP
.PP
.nf
/*

The following code will try to read an INI section called `my_section`, expected to
contain the following typed data:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{\&.ini}

[my_section]

my_string = [string]
my_number = [number]
my_boolean = [boolean]
my_implicit_boolean
my_array = [comma-delimited array]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

No errors will be generated if any of the data above are absent\&.

*/

#include <stdio\&.h>
#include <stdlib\&.h>
#include <string\&.h>
#include <confini\&.h>

#define FALSE 0
#define TRUE 1
#define bool unsigned char

#define MY_ARRAY_DELIMITER ','

/* My stored data */
struct ini_store {
    char *my_section_my_string;
    signed int my_section_my_number;
    bool my_section_my_boolean;
    bool my_section_my_implicit_boolean;
    char **my_section_my_array;
    unsigned int my_section_my_arr_len;
    int _read_status_;
};

static int populate_array (char *part, size_t part_len, size_t idx, IniFormat format, void *v_array) {

    ini_unquote(part, format);
    ((char **) v_array)[idx] = part;
    return 0;

}

static int my_ini_listener (IniDispatch *this, void *v_store) {

    struct ini_store *store = (struct ini_store *) v_store;

    switch (this->type) {

        case INI_SECTION:

            store->_read_status_ = ini_string_match_si("my_section", this->data, this->format) ? 1 : store->_read_status_ | 2;
            break;

        case INI_KEY:

            if (store->_read_status_ == 1) {

                this->d_len = ini_unquote(this->data, this->format);

                if (ini_string_match_ss("my_string", this->data, this->format)) {

                    this->v_len = ini_unquote(this->value, this->format);
                    store->my_section_my_string = (char *) malloc((this->v_len + 1) * sizeof(char));
                    memcpy(store->my_section_my_string, this->value, this->v_len + 1);

                } else if (ini_string_match_ss("my_number", this->data, this->format)) {

                    store->my_section_my_number = ini_get_int(this->value);

                } else if (ini_string_match_ss("my_boolean", this->data, this->format)) {

                    store->my_section_my_boolean = ini_get_bool(this->value, 1);

                } else if (ini_string_match_ss("my_implicit_boolean", this->data, this->format)) {

                    store->my_section_my_implicit_boolean = ini_get_bool(this->value, 1);

                } else if (ini_string_match_ss("my_array", this->data, this->format)) {

                    /* Save memory (not strictly needed) */
                    this->v_len = ini_collapse_array(this->value, MY_ARRAY_DELIMITER, this->format);

                    /* Allocate a new array of strings */
                    store->my_section_my_arr_len = ini_array_get_length(this->value, MY_ARRAY_DELIMITER, this->format);
                    store->my_section_my_array = (char **) malloc(store->my_section_my_arr_len * sizeof(char *) + (this->v_len + 1) * sizeof(char));
                    char * const str_ptr = (char *) store->my_section_my_array + store->my_section_my_arr_len * sizeof(char *);
                    memcpy(str_ptr, this->value, this->v_len + 1);

                    /* Populate the array */
                    ini_split_array(str_ptr, MY_ARRAY_DELIMITER, this->format, populate_array, store->my_section_my_array);

                }

            }

            break;

    }

    return 0;

}

static void print_stored_data (const struct ini_store * const store) {

    printf(

        "my_string -> %s\n"
        "my_number -> %d\n"
        "my_boolean -> %s\n"
        "my_implicit_boolean -> %s\n"
        "my_array[%d] -> [%s",

        store->my_section_my_string,
        store->my_section_my_number,
        store->my_section_my_boolean ? "true (`1`)" : "false (`0`)",
        store->my_section_my_implicit_boolean ? "true (`1`)" : "false (`0`)",
        store->my_section_my_arr_len,
        store->my_section_my_arr_len ? store->my_section_my_array[0] : ""

    );

    for (unsigned int idx = 1; idx < store->my_section_my_arr_len; idx++) {

        printf("|%s", store->my_section_my_array[idx]);

    }

    printf("]\n");

}

int main () {

    IniFormat my_format;

    struct ini_store my_store = { NULL, -1, FALSE, FALSE, NULL, 0, 0 };

    ini_set_implicit_value("YES", 0);
    my_format = INI_DEFAULT_FORMAT;
    my_format\&.semicolon = my_format\&.hash = INI_FORGET_COMMENT;
    my_format\&.implicit_is_not_empty = TRUE;

    if (load_ini_path("typed_ini\&.conf", my_format, NULL, my_ini_listener, &my_store)) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    my_store\&._read_status_ &= 1;
    print_stored_data(&my_store);

    if (!my_store\&._read_status_) {

        printf("\nSection `[my_section]` has not been found\&.\n");

    }

    if (my_store\&.my_section_my_string) {

        free(my_store\&.my_section_my_string);

    }

    if (my_store\&.my_section_my_arr_len) {

        free(my_store\&.my_section_my_array);

    }

    return 0;

}

.fi
.PP
 
.SS "signed int ini_get_lazy_bool (const char *const ini_string, const signed int return_value)"

.PP
Checks whether the first letter of a string matches the first letter of one of the booleans listed in the private constant \fC_LIBCONFINI_BOOLEANS_\fP (case insensitive) 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP A string to be checked 
.br
\fIreturn_value\fP A value that is returned if no matching boolean has been found 
.RE
.PP
\fBReturns:\fP
.RS 4
The matching boolean value (0 or 1) or \fCreturn_value\fP if no boolean has been found
.RE
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&. 
.SS "void ini_set_implicit_value (char *const implicit_value, const size_t implicit_v_len)"

.PP
Sets the value used for implicit keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fIimplicit_value\fP The string to be used as implicit value (usually \fC'YES'\fP, or \fC'TRUE'\fP) 
.br
\fIimplicit_v_len\fP The length of \fCimplicit_value\fP (usually \fC0\fP, independently of its real length) 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing
.RE
.PP
In order to be thread-safe this function should be used only once, or otherwise a mutex must be introduced\&.
.PP
.PP
.nf
/* examples/topics/ini_set_implicit_value\&.c */

#include <stdio\&.h>
#include <confini\&.h>

#define NO 0
#define YES 1

int ini_listener (IniDispatch *dispatch, void *v_null) {

    if (dispatch->value == INI_IMPLICIT_VALUE) {

        printf(
            "\nDATA: %s\nVALUE: %s\n(This is an implicit key element)\n",
            dispatch->data, dispatch->value
        );

    } else {

        printf("\nDATA: %s\nVALUE: %s\n", dispatch->data, dispatch->value);

    }

    return 0;

}

int main () {

    IniFormat my_format;

    ini_set_implicit_value("[implicit default value]", 0);

    /* Without setting this, implicit keys will be anyway considered empty: */
    my_format\&.implicit_is_not_empty = YES;

    if (load_ini_path("example\&.conf", my_format, NULL, ini_listener, NULL)) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    return 0;

}
.fi
.PP
 
.SS "int ini_split_array (char *const ini_string, const char delimiter, const \fBIniFormat\fP format, int(*)(char *member, size_t memb_length, size_t index, \fBIniFormat\fP format, void *foreach_other) f_foreach, void * user_data)"

.PP
Splits a stringified INI array into NUL-separated members and calls a custom function for each member\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP The stringified array 
.br
\fIdelimiter\fP The delimiter between the array members – if zero (\fCINI_ANY_SPACE\fP) any space is delimiter (\fC/(?:\\\\(?:\\n\\r?|\\r\\n?)|[\\t \\v\\f])+/\fP) 
.br
\fIformat\fP The format of the INI file 
.br
\fIf_foreach\fP The function that will be invoked for each array member 
.br
\fIuser_data\fP A custom argument, or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero for success, otherwise an error code
.RE
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&.
.PP
The function \fCf_foreach\fP will be invoked with five arguments: \fCmember\fP (a pointer to \fCini_string\fP), \fCmemb_length\fP (the length of the member in bytes), \fCindex\fP (the index of the member in number of members), \fCformat\fP (the format of the INI file), \fCforeach_other\fP (the custom argument \fCuser_data\fP previously passed)\&. If \fCf_foreach\fP returns a non-zero value the function \fC\fBini_split_array()\fP\fP will be interrupted\&.
.PP
Similarly to \fCstrtok()\fP this function can be used only once for a given string\&.
.PP
See example under \fC\fBini_collapse_array()\fP\fP\&. 
.SS "_Bool ini_string_match_ii (const char *const ini_string_a, const char *const ini_string_b, const \fBIniFormat\fP format)"

.PP
Compares two INI strings and checks if they match according to a format\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_string_a\fP The first INI string unescaped according to \fCformat\fP 
.br
\fIini_string_b\fP The second INI string unescaped according to \fCformat\fP 
.br
\fIformat\fP The format of the INI file 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean: \fCTRUE\fP if the two strings match, \fCFALSE\fP otherwise
.RE
.PP
INI strings are the strings typically dispatched by \fC\fBload_ini_file()\fP\fP and \fC\fBload_ini_path()\fP\fP, which may contain quotes and the three escaping sequences \fC\\\\\fP, \fC\\'\fP and \fC\\"\fP\&.
.PP
The argument \fCformat\fP is used for the following properties:
.PP
.IP "\(bu" 2
\fCformat\&.no_double_quotes\fP
.IP "\(bu" 2
\fCformat\&.no_single_quotes\fP
.IP "\(bu" 2
\fCformat\&.multiline_entries\fP
.IP "\(bu" 2
\fCformat\&.case_sensitive\fP 
.PP

.SS "_Bool ini_string_match_si (const char *const simple_string, const char *const ini_string, const \fBIniFormat\fP format)"

.PP
Compares an INI string with a simple string and checks if they match according to a format\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP The INI string escaped according to \fCformat\fP 
.br
\fIsimple_string\fP The simple string 
.br
\fIformat\fP The format of the INI file 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean: \fCTRUE\fP if the two strings match, \fCFALSE\fP otherwise
.RE
.PP
INI strings are the strings typically dispatched by \fC\fBload_ini_file()\fP\fP and \fC\fBload_ini_path()\fP\fP, which may contain quotes and the three escaping sequences \fC\\\\\fP, \fC\\'\fP and \fC\\"\fP\&. Simple strings are user-given strings or the result of \fC\fBini_unquote()\fP\fP\&.
.PP
The argument \fCformat\fP is used for the following properties:
.PP
.IP "\(bu" 2
\fCformat\&.no_double_quotes\fP
.IP "\(bu" 2
\fCformat\&.no_single_quotes\fP
.IP "\(bu" 2
\fCformat\&.multiline_entries\fP
.IP "\(bu" 2
\fCformat\&.case_sensitive\fP
.PP
.PP
.PP
.nf
/* examples/topics/ini_string_match_si\&.c */

#include <stdio\&.h>
#include <confini\&.h>

static int passfinder (IniDispatch *disp, void *v_membid) {

    /* Search for `password = "Hello world"` in the INI file */
    if (
        ini_string_match_si("password", disp->data, disp->format)
        && ini_string_match_si("Hello world", disp->value, disp->format)
    ) {

        *((size_t *) v_membid) = disp->dispatch_id;
        return 1;

    }

    return 0;

}

int main () {

    size_t membid;

    /* Load INI file */
    int retval = load_ini_path(
        "example\&.conf",
        INI_DEFAULT_FORMAT,
        NULL,
        passfinder,
        &membid
    );

    /* Check for errors */
    if (retval & CONFINI_ERROR) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    /* Check if `load_ini_path()` has been interrupted by `passfinder()` */
    retval  ==  CONFINI_EFEINTR ?
                printf("We found it! It's the INI element number #%d!\n", membid)
            :
                printf("We didn't find it :-(\n");

    return 0;

}
.fi
.PP
 
.SS "_Bool ini_string_match_ss (const char *const simple_string_a, const char *const simple_string_b, const \fBIniFormat\fP format)"

.PP
Compares two simple strings and checks if they match\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsimple_string_a\fP The first simple string 
.br
\fIsimple_string_b\fP The second simple string 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean: \fCTRUE\fP if the two strings match, \fCFALSE\fP otherwise
.RE
.PP
Simple strings are user-given strings or the result of \fC\fBini_unquote()\fP\fP\&. The argument \fCformat\fP is used for the following properties:
.PP
.IP "\(bu" 2
\fCformat\&.case_sensitive\fP 
.PP

.SS "size_t ini_unquote (char *const ini_string, const \fBIniFormat\fP format)"

.PP
Unescapes \fC\\\\\fP, \fC\\'\fP and \fC\\"\fP and removes all unescaped quotes (if single/double quotes are considered metacharacters in respect to the format given) 
.PP
\fBParameters:\fP
.RS 4
\fIini_string\fP The string to be unescaped 
.br
\fIformat\fP The format of the INI file 
.RE
.PP
\fBReturns:\fP
.RS 4
The new length of the string
.RE
.PP
Usually \fCini_string\fP comes from an \fC\fBIniDispatch\fP\fP (but any other string may be used as well)\&. If the string does not contain quotes, or if quotes are considered to be normal characters, no changes will be made\&.
.PP
The argument \fCformat\fP is used for the following properties:
.PP
.IP "\(bu" 2
\fCformat\&.no_double_quotes\fP
.IP "\(bu" 2
\fCformat\&.no_single_quotes\fP
.IP "\(bu" 2
\fCformat\&.multiline_entries\fP
.PP
.PP
.PP
.nf
/* examples/topics/ini_unquote\&.c */

#include <stdio\&.h>
#include <confini\&.h>

int ini_listener (IniDispatch *dispatch, void *v_null) {

    if (dispatch->type == INI_KEY || dispatch->type == INI_DISABLED_KEY) {

        ini_unquote(dispatch->value, dispatch->format);

    }

    printf("DATA: %s\nVALUE: %s\n", dispatch->data, dispatch->value);

    return 0;

}

int main () {

    if (load_ini_path("example\&.conf", INI_DEFAULT_FORMAT, NULL, ini_listener, NULL)) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    return 0;

}
.fi
.PP
 
.SS "int load_ini_file (FILE *const ini_file, const \fBIniFormat\fP format, int(*)(\fBIniStatistics\fP *statistics, void *init_other) f_init, int(*)(\fBIniDispatch\fP *dispatch, void *foreach_other) f_foreach, void * user_data)"

.PP
Parses an INI file and dispatches its content\&. 
.PP
\fBParameters:\fP
.RS 4
\fIini_file\fP The \fCFILE\fP structure pointing to the INI file to parse 
.br
\fIformat\fP The format of the INI file 
.br
\fIf_init\fP The function that will be invoked before the dispatch, or NULL 
.br
\fIf_foreach\fP The function that will be invoked for each dispatch, or NULL 
.br
\fIuser_data\fP A custom argument, or NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero for success, otherwise an error code
.RE
.PP
The function \fCf_init\fP will be invoked with two arguments: \fCstatistics\fP (a pointer to an \fC\fBIniStatistics\fP\fP object containing some properties about the file read) and \fCinit_other\fP (the custom argument \fCuser_data\fP previously passed)\&. If \fCf_init\fP returns a non-zero value the caller function will be interrupted\&.
.PP
The function \fCf_foreach\fP will be invoked with two arguments: \fCdispatch\fP (a pointer to an \fC\fBIniDispatch\fP\fP object containing the parsed member of the INI file) and \fCforeach_other\fP (the custom argument \fCuser_data\fP previously passed)\&. If \fCf_foreach\fP returns a non-zero value the caller function will be interrupted\&.
.PP
.PP
.nf
/* examples/topics/load_ini_file\&.c */

#include <stdio\&.h>
#include <confini\&.h>

int ini_listener (IniDispatch *dispatch, void *v_null) {

    printf(
        "DATA: %s\nVALUE: %s\nNODE TYPE: %d\n\n",
        dispatch->data, dispatch->value, dispatch->type
    );

    return 0;

}

int main () {

    FILE * const ini_file = fopen("example\&.conf", "r");

    if (ini_file == NULL) {

        fprintf(stderr, "File doesn't exist :-(\n");
        return 1;

    }

    if (load_ini_file(ini_file, INI_DEFAULT_FORMAT, NULL, ini_listener, NULL)) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    fclose(ini_file);

    return 0;

}
.fi
.PP
 
.SS "int load_ini_path (const char *const path, const \fBIniFormat\fP format, int(*)(\fBIniStatistics\fP *statistics, void *init_other) f_init, int(*)(\fBIniDispatch\fP *dispatch, void *foreach_other) f_foreach, void * user_data)"

.PP
Parses an INI file and dispatches its content\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP The path of the INI file 
.br
\fIformat\fP The format of the INI file 
.br
\fIf_init\fP The function that will be invoked before the dispatch, or \fCNULL\fP 
.br
\fIf_foreach\fP The function that will be invoked for each dispatch, or \fCNULL\fP 
.br
\fIuser_data\fP A custom argument, or \fCNULL\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero for success, otherwise an error code
.RE
.PP
For the two parameters \fCf_init\fP and \fCf_foreach\fP see function \fC\fBload_ini_file()\fP\fP\&.
.PP
.PP
.nf
/* examples/topics/load_ini_path\&.c */

#include <stdio\&.h>
#include <confini\&.h>

int ini_listener (IniDispatch *dispatch, void *v_null) {

    printf(
        "DATA: %s\nVALUE: %s\nNODE TYPE: %d\n\n",
        dispatch->data, dispatch->value, dispatch->type
    );

    return 0;

}

int main () {

    if (load_ini_path("example\&.conf", INI_DEFAULT_FORMAT, NULL, ini_listener, NULL)) {

        fprintf(stderr, "Sorry, something went wrong :-(\n");
        return 1;

    }

    return 0;

}
.fi
.PP
 
.SH "Variable Documentation"
.PP 
.SS "const \fBIniFormat\fP INI_DEFAULT_FORMAT = { \fBINI_EQUALS\fP , \fBINI_PARSE_COMMENT\fP , \fBINI_PARSE_COMMENT\fP , \fBINI_EVERYTHING_MULTILINE\fP , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , }\fC [static]\fP"

.PP
A model format\&. 
.SS "double(* const ini_get_float) (const char *ini_string)"

.PP
Link to \fC\fCatof()\fP\fP 
.SS "int(* const ini_get_int) (const char *ini_string)"

.PP
Link to \fC\fCatoi()\fP\fP 
.SS "long int(* const ini_get_lint) (const char *ini_string)"

.PP
Link to \fC\fCatol()\fP\fP 
.SS "long long int(* const ini_get_llint) (const char *ini_string)"

.PP
Link to \fC\fCatoll()\fP\fP 
.SS "size_t INI_IMPLICIT_V_LEN"

.PP
Length of the value dispatched in case of implicit keys – it can be set to any unsigned number, independently of \fBINI_IMPLICIT_VALUE\fP (default value: \fC0\fP) 
.SS "char* INI_IMPLICIT_VALUE"

.PP
Value to be dispatched in case of implicit keys (default value: \fCNULL\fP) 
.SS "_Bool INI_INSENSITIVE_LOWERCASE"

.PP
If set to any non-zero value key and section names in case-insensitive INI formats will be dispatched lowercase, verbatim otherwise (default value: non-zero) 
.SH "Author"
.PP 
Generated automatically by Doxygen for libconfini from the source code\&.
